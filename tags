!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
LinearRegression	mllib/supervised/parametric.py	/^class LinearRegression:$/;"	c
LogReg	mllib/supervised/parametric.py	/^class LogReg:$/;"	c
LogisticRegressionClassifier	mllib/supervised/parametric.py	/^class LogisticRegressionClassifier:$/;"	c
X_test	main.py	/^    X_test = np.array([[4, 2, 2], [5, 2, 1]])$/;"	v
X_train	main.py	/^    X_train = np.array([[1, 2, 5], [2, 3, 4], [3, 4, 3]])$/;"	v
X_train	main.py	/^    X_train = np.array([[2], [3], [7], [6], [1], [8]])$/;"	v
__all__	mllib/supervised/__init__.py	/^__all__ = ['LinearRegression',$/;"	v
__init__	mllib/supervised/.ipynb_checkpoints/non_parametric-checkpoint.py	/^    def __init__(self, k):$/;"	m	class:kNearestNeighbors
__init__	mllib/supervised/non_parametric.py	/^    def __init__(self, k):$/;"	m	class:kNearestNeighbors
__init__	mllib/supervised/parametric.py	/^    def __init__(self, r=0.5):$/;"	m	class:LogReg
__init__	mllib/supervised/parametric.py	/^    def __init__(self, r=0.5):$/;"	m	class:LogisticRegressionClassifier
_gradient_descent	mllib/supervised/parametric.py	/^    def _gradient_descent(self, iters, loss_prime, lr):$/;"	m	class:LinearRegression
_gradient_descent	mllib/supervised/parametric.py	/^    def _gradient_descent(self, iters, loss_prime, lr):$/;"	m	class:LogisticRegressionClassifier
_sigmoid	mllib/supervised/parametric.py	/^    def _sigmoid(self, Z):$/;"	m	class:LogisticRegressionClassifier
clf	main.py	/^    clf = LinearRegression()$/;"	v
clf	main.py	/^    clf = LogisticRegressionClassifier()$/;"	v
fit	mllib/supervised/.ipynb_checkpoints/non_parametric-checkpoint.py	/^    def fit(self, X, y):$/;"	m	class:kNearestNeighbors
fit	mllib/supervised/non_parametric.py	/^    def fit(self, X, y):$/;"	m	class:kNearestNeighbors
fit	mllib/supervised/parametric.py	/^    def fit(self, X, y, iters=500, lr=0.01):$/;"	m	class:LogisticRegressionClassifier
fit	mllib/supervised/parametric.py	/^    def fit(self, X, y, lamb=0, add_intercept=True, iters=1000, lr=0.006):$/;"	m	class:LinearRegression
gradient_descent	mllib/utils.py	/^def gradient_descent(self, iters, loss_prime, lr):$/;"	f
kNearestNeighbors	mllib/supervised/.ipynb_checkpoints/non_parametric-checkpoint.py	/^class kNearestNeighbors:$/;"	c
kNearestNeighbors	mllib/supervised/non_parametric.py	/^class kNearestNeighbors:$/;"	c
loss	mllib/supervised/parametric.py	/^    def loss(self, x, y):$/;"	m	class:LogReg
pred	main.py	/^    pred = clf.predict(X_test)$/;"	v
pred	main.py	/^    pred = clf.predict(np.array([[2.5], [5.5], [8], [4.5]]))$/;"	v
predict	mllib/supervised/.ipynb_checkpoints/non_parametric-checkpoint.py	/^    def predict(self, X, ptype="classification"):$/;"	m	class:kNearestNeighbors
predict	mllib/supervised/non_parametric.py	/^    def predict(self, X, ptype="classification"):$/;"	m	class:kNearestNeighbors
predict	mllib/supervised/parametric.py	/^    def predict(self, X):$/;"	m	class:LogisticRegressionClassifier
predict	mllib/supervised/parametric.py	/^    def predict(self, X, add_intercept=True):$/;"	m	class:LinearRegression
predict_one	mllib/supervised/.ipynb_checkpoints/non_parametric-checkpoint.py	/^    def predict_one(self, x_hat, ptype="classification"):$/;"	m	class:kNearestNeighbors
predict_one	mllib/supervised/non_parametric.py	/^    def predict_one(self, x_hat, ptype="classification"):$/;"	m	class:kNearestNeighbors
y_train	main.py	/^    y_train = np.array([[-1], [-1], [1], [1], [-1], [1]])$/;"	v
y_train	main.py	/^    y_train = np.array([[1], [2], [3]])$/;"	v
